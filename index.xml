<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pixelpig&#39;s blog</title>
    <link>/</link>
    <description>Recent content on Pixelpig&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>聊一聊Go网络编程--TCP连接管理(二)</title>
      <link>/2021/05/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-tcp%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86%E4%BA%8C/</link>
      <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/05/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-tcp%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86%E4%BA%8C/</guid>
      <description>&lt;p&gt;上一篇我们聊到在Go中是如何发起一个TCP连接的，以及列举一个全双工的Demo，这次接着填补上一节留下的坑，连接池管理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊Go网络的TCP连接通信(一)</title>
      <link>/2021/05/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%BD%91%E7%BB%9C%E7%9A%84tcp%E8%BF%9E%E6%8E%A5%E9%80%9A%E4%BF%A1%E4%B8%80/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/05/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%BD%91%E7%BB%9C%E7%9A%84tcp%E8%BF%9E%E6%8E%A5%E9%80%9A%E4%BF%A1%E4%B8%80/</guid>
      <description>&lt;p&gt;在网络分层的七层协议中，我们知道TCP处于HTTP层的下方，本质上HTTP连接是基于底层的TCP连接建立的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go协程间通信之生产者-消费者模型</title>
      <link>/2021/01/go%E5%8D%8F%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 18 Jan 2021 03:40:05 +0800</pubDate>
      
      <guid>/2021/01/go%E5%8D%8F%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;p&gt;不要通过共享内存来通信(互斥锁同步)，而要用通信来共享内存。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊操作系统线程调度与Go协程</title>
      <link>/2020/10/%E8%81%8A%E4%B8%80%E8%81%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E4%B8%8Ego%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/10/%E8%81%8A%E4%B8%80%E8%81%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E4%B8%8Ego%E5%8D%8F%E7%A8%8B/</guid>
      <description>&lt;p&gt;我们计算机上面跑的每个任务，都是操作系统层面的资源分配，从启动进程到创建线程，在核数固定的情况下，多线程并发地执行。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊Go的Context上下文</title>
      <link>/2020/06/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%9A%84context%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/06/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%9A%84context%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
      <description>&lt;p&gt;前面在“聊一聊http框架&lt;strong&gt;httprouter&lt;/strong&gt;”的时候，提到了上下文的概念&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊Gin Web框架之前，看一眼httprouter</title>
      <link>/2020/06/%E8%81%8A%E4%B8%80%E8%81%8Agin-web%E6%A1%86%E6%9E%B6%E4%B9%8B%E5%89%8D%E7%9C%8B%E4%B8%80%E7%9C%BChttprouter/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/06/%E8%81%8A%E4%B8%80%E8%81%8Agin-web%E6%A1%86%E6%9E%B6%E4%B9%8B%E5%89%8D%E7%9C%8B%E4%B8%80%E7%9C%BChttprouter/</guid>
      <description>&lt;p&gt;前言: Gin的词源是金酒, 又称琴酒, 是来自荷兰的一种烈性酒。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊堆、栈与Go语言的指针</title>
      <link>/2020/04/%E8%81%8A%E4%B8%80%E8%81%8A%E5%A0%86%E6%A0%88%E4%B8%8Ego%E8%AF%AD%E8%A8%80%E7%9A%84%E6%8C%87%E9%92%88/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/04/%E8%81%8A%E4%B8%80%E8%81%8A%E5%A0%86%E6%A0%88%E4%B8%8Ego%E8%AF%AD%E8%A8%80%E7%9A%84%E6%8C%87%E9%92%88/</guid>
      <description>&lt;p&gt;堆、栈在计算机领域是亘古不变的热门话题，归根结底它们都是操作系统层面的内存划分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Grpc action</title>
      <link>/2020/03/grpc-action/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/03/grpc-action/</guid>
      <description>&lt;p&gt;RPC：远程过程调用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊Go语言的error处理</title>
      <link>/2020/03/%E8%81%8A%E4%B8%80%E8%81%8Ago%E8%AF%AD%E8%A8%80%E7%9A%84error%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/03/%E8%81%8A%E4%B8%80%E8%81%8Ago%E8%AF%AD%E8%A8%80%E7%9A%84error%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;在Go语言中，错误处理是一个常见的操作&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊Go编写的命令行工具类</title>
      <link>/2020/02/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%BC%96%E5%86%99%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E7%B1%BB/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/02/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%BC%96%E5%86%99%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E7%B1%BB/</guid>
      <description>&lt;p&gt;Go原生在flag包提供了一个命令行工具类，它可以让我们执行类似命令行的赋参操作，经常被运用于工具类，特别是数据处理过程，可以方便我们进行参数可视化注解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浅谈 Java单例模式</title>
      <link>/2019/08/%E6%B5%85%E8%B0%88-java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/08/%E6%B5%85%E8%B0%88-java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;相信在设计模式中有一个经常提到的概念：&lt;strong&gt;单例模式&lt;/strong&gt;，为什么它经常出现在面试话题中，因为它的应用场景十分广泛。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>简述 Java线程池以及使用</title>
      <link>/2019/07/%E7%AE%80%E8%BF%B0-java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/07/%E7%AE%80%E8%BF%B0-java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;线程池可以避免频繁创建销毁线程，提高性能。常见如数据库的连接池。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java反射机制和代理模式的应用</title>
      <link>/2019/03/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/03/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>&lt;p&gt;RPC：远程过程调用&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
