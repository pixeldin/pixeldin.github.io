<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pixelpig - tech</title>
    <link>/en/</link>
    <description>Recent content on pixelpig - tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Talk about Go: A high performance pool for reusing object - Sync.Pool</title>
      <link>/en/2022/04/talk-about-go-a-high-performance-pool-for-reusing-object-sync.pool/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/en/2022/04/talk-about-go-a-high-performance-pool-for-reusing-object-sync.pool/</guid>
      <description>&lt;p&gt;Pooling is frequently occurring in software field, such as connection pool\thread pool\routine poool etc. A pool is essentially to reuse resources.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: Goroutine&#39;s information and how to prevent goroutine leaks</title>
      <link>/en/2022/03/talk-about-go-goroutines-information-and-how-to-prevent-goroutine-leaks/</link>
      <pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/en/2022/03/talk-about-go-goroutines-information-and-how-to-prevent-goroutine-leaks/</guid>
      <description>&lt;p&gt;Goroutines are a common concept in Go, which starts and ends with the life cycle of a go program. Today, let&amp;rsquo;s talk about Go&amp;rsquo;s goroutine leak.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: A simple implement of Circuit Breaker</title>
      <link>/en/2022/02/talk-about-go-a-simple-implement-of-circuit-breaker/</link>
      <pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/en/2022/02/talk-about-go-a-simple-implement-of-circuit-breaker/</guid>
      <description>&lt;p&gt;A simple implement of circuit breaker with Go, trigger for fail-fast and return quickly when your API comes to &lt;strong&gt;high error rate durning a period of time&lt;/strong&gt;.
It&amp;rsquo;s a protection strategy that prevents the upstream from retrying repeatedly so that the downstream is overwhelmed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: Network programming about grouping and unpacking in TCP flow</title>
      <link>/en/2022/02/talk-about-go-network-programming-about-grouping-and-unpacking-in-tcp-flow/</link>
      <pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/en/2022/02/talk-about-go-network-programming-about-grouping-and-unpacking-in-tcp-flow/</guid>
      <description>&lt;p&gt;As we all know, packet body transmission is an import part of network communication, whether it is the &lt;code&gt;header&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt; of HTTP packets at the application layer, or the streaming data of TCP at the transport layer.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: The gracefully handling of service restart</title>
      <link>/en/2021/12/talk-about-go-the-gracefully-handling-of-service-restart/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/12/talk-about-go-the-gracefully-handling-of-service-restart/</guid>
      <description>&lt;p&gt;Last time we talked about graceful shutdown of Go programs, today we will talk about graceful restarts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: The gracefully handling of service shutdown</title>
      <link>/en/2021/11/talk-about-go-the-gracefully-handling-of-service-shutdown/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/11/talk-about-go-the-gracefully-handling-of-service-shutdown/</guid>
      <description>&lt;p&gt;From high availability to graceful shutdown/restart, to refinement to program offline/restart, etc. So what can we do in Go? Today let&amp;rsquo;s talk about the graceful shutdown of go programs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: How to custom build a gateway interceptor in Gin framwork</title>
      <link>/en/2021/10/talk-about-go-how-to-custom-build-a-gateway-interceptor-in-gin-framwork/</link>
      <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/10/talk-about-go-how-to-custom-build-a-gateway-interceptor-in-gin-framwork/</guid>
      <description>&lt;p&gt;Middleware often used as a level &amp;ldquo;security check&amp;rdquo;, for core components such as request header/request body verification, caching, and current limiting.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Before talking about the Gin web framework, let&#39;s take a look at httprouter</title>
      <link>/en/2021/08/before-talking-about-the-gin-web-framework-lets-take-a-look-at-httprouter/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/08/before-talking-about-the-gin-web-framework-lets-take-a-look-at-httprouter/</guid>
      <description>&lt;p&gt;The etymology of Gin a strong alcohol, comes from the Netherlands.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊Go实现的多协程下载器: gopeed-core</title>
      <link>/en/2021/06/%E8%81%8A%E4%B8%80%E8%81%8Ago%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%A4%9A%E5%8D%8F%E7%A8%8B%E4%B8%8B%E8%BD%BD%E5%99%A8-gopeed-core/</link>
      <pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/06/%E8%81%8A%E4%B8%80%E8%81%8Ago%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%A4%9A%E5%8D%8F%E7%A8%8B%E4%B8%8B%E8%BD%BD%E5%99%A8-gopeed-core/</guid>
      <description>&lt;p&gt;之前在Github社区偶然发现一个Go实现的下载器，作为个人学习的一个参照模板，这里要感谢一下作者monkeyWie(网名)的开源项目&lt;a href=&#34;github.com/monkeyWie/gopeed-core&#34;&gt;gopeed-core&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: Network programming--TCP Connection Management</title>
      <link>/en/2021/05/talk-about-go-network-programming-tcp-connection-management/</link>
      <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/05/talk-about-go-network-programming-tcp-connection-management/</guid>
      <description>&lt;p&gt;In the last article, we talked about how to initiate a TCP connection in Go, and listed a full-duplex demo. Today, we will talk about connection pool management further.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: Network programming--TCP Communication</title>
      <link>/en/2021/05/talk-about-go-network-programming-tcp-communication/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/05/talk-about-go-network-programming-tcp-communication/</guid>
      <description>&lt;p&gt;In the seven-layer protocol of network layering, we know that TCP is below the HTTP layer. In essence, the HTTP packet body parsing is established based on the underlying TCP connection.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go协程间通信之生产者-消费者模型</title>
      <link>/en/2021/01/go%E5%8D%8F%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 18 Jan 2021 03:40:05 +0800</pubDate>
      
      <guid>/en/2021/01/go%E5%8D%8F%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;p&gt;不要通过共享内存来通信(互斥锁同步)，而要用通信来共享内存。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: The operating system&#39;s thread scheduling and Goroutines</title>
      <link>/en/2020/10/talk-about-go-the-operating-systems-thread-scheduling-and-goroutines/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/en/2020/10/talk-about-go-the-operating-systems-thread-scheduling-and-goroutines/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2271/1*Y3cMxHqERb1htaJ0GbgixQ.png&#34; alt=&#34;Steal goroutine#ref by Renee French&#34;&gt;&lt;/p&gt;
&lt;p&gt;Every task running on our computer is resource allocation at the operating system level. From starting a process to creating a thread, with a fixed number of cores, multiple threads execute concurrently.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊Go的Context上下文</title>
      <link>/en/2020/06/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%9A%84context%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/en/2020/06/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%9A%84context%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
      <description>&lt;p&gt;前面在“聊一聊http框架&lt;strong&gt;httprouter&lt;/strong&gt;”的时候，提到了上下文的概念&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊堆、栈与Go语言的指针</title>
      <link>/en/2020/04/%E8%81%8A%E4%B8%80%E8%81%8A%E5%A0%86%E6%A0%88%E4%B8%8Ego%E8%AF%AD%E8%A8%80%E7%9A%84%E6%8C%87%E9%92%88/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/en/2020/04/%E8%81%8A%E4%B8%80%E8%81%8A%E5%A0%86%E6%A0%88%E4%B8%8Ego%E8%AF%AD%E8%A8%80%E7%9A%84%E6%8C%87%E9%92%88/</guid>
      <description>&lt;p&gt;堆、栈在计算机领域是亘古不变的热门话题，归根结底它们都是操作系统层面的内存划分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊Go语言的error处理</title>
      <link>/en/2020/03/%E8%81%8A%E4%B8%80%E8%81%8Ago%E8%AF%AD%E8%A8%80%E7%9A%84error%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/en/2020/03/%E8%81%8A%E4%B8%80%E8%81%8Ago%E8%AF%AD%E8%A8%80%E7%9A%84error%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;在Go语言中，错误处理是一个常见的操作&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊Go编写的命令行工具类</title>
      <link>/en/2020/02/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%BC%96%E5%86%99%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E7%B1%BB/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/en/2020/02/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%BC%96%E5%86%99%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E7%B1%BB/</guid>
      <description>&lt;p&gt;Go原生在flag包提供了一个命令行工具类，它可以让我们执行类似命令行的赋参操作，经常被运用于工具类，特别是数据处理过程，可以方便我们进行参数可视化注解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浅谈 Java单例模式</title>
      <link>/en/2019/08/%E6%B5%85%E8%B0%88-java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/08/%E6%B5%85%E8%B0%88-java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;相信在设计模式中有一个经常提到的概念：&lt;strong&gt;单例模式&lt;/strong&gt;，为什么它经常出现在面试话题中，因为它的应用场景十分广泛。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>简述 Java线程池以及使用</title>
      <link>/en/2019/07/%E7%AE%80%E8%BF%B0-java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/07/%E7%AE%80%E8%BF%B0-java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;线程池可以避免频繁创建销毁线程，提高性能。常见如数据库的连接池。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java反射机制和代理模式的应用</title>
      <link>/en/2019/03/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/en/2019/03/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>&lt;p&gt;RPC：远程过程调用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/1/01/</guid>
      <description>pixelblog 个人博客归档</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/1/01/</guid>
      <description>pixelblog 个人博客归档</description>
    </item>
    
  </channel>
</rss>
