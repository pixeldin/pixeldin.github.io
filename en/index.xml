<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pixelpig.tech</title>
    <link>https://pixeldin.github.io/en/</link>
    <description>Recent content on pixelpig.tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://pixeldin.github.io/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About Pixelpig</title>
      <link>https://pixeldin.github.io/en/page/about/</link>
      <pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/page/about/</guid>
      <description>Keep it simple, so as this bio. 你好，我是 Pixelpig，过去曾经在国内互联网与流媒体公司参与数据处理相关工作，大概4年服务端，1年全栈开发，目前在沉淀技术中，希望未来能做点什么好玩的事情 喜欢分享，对开源项目保持热情，参与过如APISIX，Sealos等开源社区feature开发和bugfix工作 近期对交互设计，流媒体处理也挺感兴趣，正在研究ffmpeg,迭代项目ffmpig 技能 熟悉服务端开发语言：Golang/Java/Lua/TypeScript 熟悉前端常用框架Vue.js/Next.js，能独立创建维护应用 熟悉主流数据库使用: Redis/MongoDB/MySQL/Kafka 熟悉常用微服务框架，掌握Linux常用命令与Shell脚本编写 项目经验 众创像素 前端可视化组件集成开发 结合Chart.js, D3.js前端框架，生成图表、地图和其他数据可视化组件 使用Next.js框架提供上游应用的预渲染，当用户访问 Next.js 应用程序时，从服务器获取页面的初始网页代码，加速应用程序能够快速地响应用户交互和更新 广州虎牙 (2021-2022) 负责云生产平台后端组件、通用模块开发 配合项目使用 go-micro 微服务框架，引入自定义插件，定制 Circuit Breaker熔断器保护组件，基于读写锁实现实时 API 错误率统计
支持公司周边服务系统开发 参与日活 40 万直播间业务开发，负责积分礼物分发系统，引入事务管理协调器，使用 Redis+MySQL 搭建分布式事务系统，搭建异步消息延迟队列作库存一致性保障 负责年会游戏排队功能开发，接入内部 Tars RPC 框架，使用 DCache 内存队列存储用户报名信息 珠海金山网络游戏 (2018-2021) 剑网三游戏PVP 竞技场数据采集开发 搭建游戏数据实时上报链路：自定义 Kafka 分区分发策略、消费端 lag/lead 监控指标，使用 MongoDB 持久化存储日志，设置分片键与读写场景策略调优 负责日均 30 万竞技场数据 ETL 实时计算：组建 Redis 内存压缩队列（hash 表+zset 集合），采用上下游数据生产-消费模型，使用 Go channel 限流，构建失败重试队列，引入 Go 原生 sync.</description>
    </item>
    
    <item>
      <title>Talk about TypeScript&#39;s interface</title>
      <link>https://pixeldin.github.io/en/2023/02/talk-about-typescripts-interface/</link>
      <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/2023/02/talk-about-typescripts-interface/</guid>
      <description>&lt;p&gt;&amp;ldquo;&amp;ldquo;Call it a duck if it looks like one.&amp;rdquo; Interface is used to define the shape or structure of an object.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about etcd (Part3): the Communication Protocol between Client and Server</title>
      <link>https://pixeldin.github.io/en/2022/06/talk-about-etcd-part3-the-communication-protocol-between-client-and-server/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/2022/06/talk-about-etcd-part3-the-communication-protocol-between-client-and-server/</guid>
      <description>&lt;p&gt;As mentioned earlier, etcd implements each module through layers. This time we will enter the network part.
Today, let’s talk about the communication way of etcd inside the server and client role.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about etcd (Part2): the raft consistency protocol</title>
      <link>https://pixeldin.github.io/en/2022/06/talk-about-etcd-part2-the-raft-consistency-protocol/</link>
      <pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/2022/06/talk-about-etcd-part2-the-raft-consistency-protocol/</guid>
      <description>&lt;p&gt;The purpose of the consensus algorithm is to maintain a consensus conclusion when there is an abnormality in the machine cluster to ensure the provision of services to the outside world.&lt;/p&gt;
&lt;p&gt;Today, let’s talk about the consensus mechanism of etcd, the raft protocol.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about etcd (Part1): Hierarchy Overview with bird&#39;s eye view</title>
      <link>https://pixeldin.github.io/en/2022/05/talk-about-etcd-part1-hierarchy-overview-with-birds-eye-view/</link>
      <pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/2022/05/talk-about-etcd-part1-hierarchy-overview-with-birds-eye-view/</guid>
      <description>&lt;p&gt;etcd is very common in the field of microservices. This series will talk about what problems etcd solves and how it solves it for a step-by-step analysis.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: A high performance pool for reusing object - Sync.Pool</title>
      <link>https://pixeldin.github.io/en/2022/04/talk-about-go-a-high-performance-pool-for-reusing-object-sync.pool/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/2022/04/talk-about-go-a-high-performance-pool-for-reusing-object-sync.pool/</guid>
      <description>&lt;p&gt;Pooling is frequently occurring in software field, such as connection pool\thread pool\routine poool etc. A pool is essentially to reuse resources.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: Goroutine&#39;s information and how to prevent goroutine leaks</title>
      <link>https://pixeldin.github.io/en/2022/03/talk-about-go-goroutines-information-and-how-to-prevent-goroutine-leaks/</link>
      <pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/2022/03/talk-about-go-goroutines-information-and-how-to-prevent-goroutine-leaks/</guid>
      <description>&lt;p&gt;Goroutines are a common concept in Go, which starts and ends with the life cycle of a go program. Today, let&amp;rsquo;s talk about Go&amp;rsquo;s goroutine leak.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: A simple implement of Circuit Breaker</title>
      <link>https://pixeldin.github.io/en/2022/02/talk-about-go-a-simple-implement-of-circuit-breaker/</link>
      <pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/2022/02/talk-about-go-a-simple-implement-of-circuit-breaker/</guid>
      <description>&lt;p&gt;A simple implement of circuit breaker with Go, trigger for fail-fast and return quickly when your API comes to &lt;strong&gt;high error rate durning a period of time&lt;/strong&gt;.
It&amp;rsquo;s a protection strategy that prevents the upstream from retrying repeatedly so that the downstream is overwhelmed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: Network programming about grouping and unpacking in TCP flow</title>
      <link>https://pixeldin.github.io/en/2022/02/talk-about-go-network-programming-about-grouping-and-unpacking-in-tcp-flow/</link>
      <pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/2022/02/talk-about-go-network-programming-about-grouping-and-unpacking-in-tcp-flow/</guid>
      <description>&lt;p&gt;As we all know, packet body transmission is an import part of network communication, whether it is the &lt;code&gt;header&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt; of HTTP packets at the application layer, or the streaming data of TCP at the transport layer.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: The gracefully handling of service restart</title>
      <link>https://pixeldin.github.io/en/2021/12/talk-about-go-the-gracefully-handling-of-service-restart/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/2021/12/talk-about-go-the-gracefully-handling-of-service-restart/</guid>
      <description>&lt;p&gt;Last time we talked about graceful shutdown of Go programs, today we will talk about graceful restarts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: The gracefully handling of service shutdown</title>
      <link>https://pixeldin.github.io/en/2021/11/talk-about-go-the-gracefully-handling-of-service-shutdown/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/2021/11/talk-about-go-the-gracefully-handling-of-service-shutdown/</guid>
      <description>&lt;p&gt;From high availability to graceful shutdown/restart, to refinement to program offline/restart, etc. So what can we do in Go? Today let&amp;rsquo;s talk about the graceful shutdown of go programs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: How to custom build a gateway interceptor in Gin framwork</title>
      <link>https://pixeldin.github.io/en/2021/10/talk-about-go-how-to-custom-build-a-gateway-interceptor-in-gin-framwork/</link>
      <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/2021/10/talk-about-go-how-to-custom-build-a-gateway-interceptor-in-gin-framwork/</guid>
      <description>&lt;p&gt;Middleware often used as a level &amp;ldquo;security check&amp;rdquo;, for core components such as request header/request body verification, caching, and current limiting.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Before talking about the Gin web framework, let&#39;s take a look at httprouter</title>
      <link>https://pixeldin.github.io/en/2021/08/before-talking-about-the-gin-web-framework-lets-take-a-look-at-httprouter/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/2021/08/before-talking-about-the-gin-web-framework-lets-take-a-look-at-httprouter/</guid>
      <description>&lt;p&gt;The etymology of Gin a strong alcohol, comes from the Netherlands.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: Network programming--TCP Connection Management</title>
      <link>https://pixeldin.github.io/en/2021/05/talk-about-go-network-programming--tcp-connection-management/</link>
      <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/2021/05/talk-about-go-network-programming--tcp-connection-management/</guid>
      <description>&lt;p&gt;In the last article, we talked about how to initiate a TCP connection in Go, and listed a full-duplex demo. Today, we will talk about connection pool management further.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: Network programming--TCP Communication</title>
      <link>https://pixeldin.github.io/en/2021/05/talk-about-go-network-programming--tcp-communication/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/2021/05/talk-about-go-network-programming--tcp-communication/</guid>
      <description>&lt;p&gt;In the seven-layer protocol of network layering, we know that TCP is below the HTTP layer. In essence, the HTTP packet body parsing is established based on the underlying TCP connection.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: The operating system&#39;s thread scheduling and Goroutines</title>
      <link>https://pixeldin.github.io/en/2020/10/talk-about-go-the-operating-systems-thread-scheduling-and-goroutines/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pixeldin.github.io/en/2020/10/talk-about-go-the-operating-systems-thread-scheduling-and-goroutines/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2271/1*Y3cMxHqERb1htaJ0GbgixQ.png&#34; alt=&#34;Steal goroutine#ref by Renee French&#34;&gt;&lt;/p&gt;
&lt;p&gt;Every task running on our computer is resource allocation at the operating system level. From starting a process to creating a thread, with a fixed number of cores, multiple threads execute concurrently.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
