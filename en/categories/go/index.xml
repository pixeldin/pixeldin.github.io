<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on pixelpig - tech</title>
    <link>/en/categories/go/</link>
    <description>Recent content in Go on pixelpig - tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="/en/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Talk about Go: A high performance pool for reusing object - Sync.Pool</title>
      <link>/en/2022/04/talk-about-go-a-high-performance-pool-for-reusing-object-sync.pool/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/en/2022/04/talk-about-go-a-high-performance-pool-for-reusing-object-sync.pool/</guid>
      <description>&lt;p&gt;Pooling is frequently occurring in software field, such as connection pool\thread pool\routine poool etc. A pool is essentially to reuse resources.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: Goroutine&#39;s information and how to prevent goroutine leaks</title>
      <link>/en/2022/03/talk-about-go-goroutines-information-and-how-to-prevent-goroutine-leaks/</link>
      <pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/en/2022/03/talk-about-go-goroutines-information-and-how-to-prevent-goroutine-leaks/</guid>
      <description>&lt;p&gt;Goroutines are a common concept in Go, which starts and ends with the life cycle of a go program. Today, let&amp;rsquo;s talk about Go&amp;rsquo;s goroutine leak.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: A simple implement of Circuit Breaker</title>
      <link>/en/2022/02/talk-about-go-a-simple-implement-of-circuit-breaker/</link>
      <pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/en/2022/02/talk-about-go-a-simple-implement-of-circuit-breaker/</guid>
      <description>&lt;p&gt;A simple implement of circuit breaker with Go, trigger for fail-fast and return quickly when your API comes to &lt;strong&gt;high error rate durning a period of time&lt;/strong&gt;.
It&amp;rsquo;s a protection strategy that prevents the upstream from retrying repeatedly so that the downstream is overwhelmed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: Network programming about grouping and unpacking in TCP flow</title>
      <link>/en/2022/02/talk-about-go-network-programming-about-grouping-and-unpacking-in-tcp-flow/</link>
      <pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/en/2022/02/talk-about-go-network-programming-about-grouping-and-unpacking-in-tcp-flow/</guid>
      <description>&lt;p&gt;As we all know, packet body transmission is an import part of network communication, whether it is the &lt;code&gt;header&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt; of HTTP packets at the application layer, or the streaming data of TCP at the transport layer.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: The gracefully handling of service restart</title>
      <link>/en/2021/12/talk-about-go-the-gracefully-handling-of-service-restart/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/12/talk-about-go-the-gracefully-handling-of-service-restart/</guid>
      <description>&lt;p&gt;Last time we talked about graceful shutdown of Go programs, today we will talk about graceful restarts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: The gracefully handling of service shutdown</title>
      <link>/en/2021/11/talk-about-go-the-gracefully-handling-of-service-shutdown/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/11/talk-about-go-the-gracefully-handling-of-service-shutdown/</guid>
      <description>&lt;p&gt;From high availability to graceful shutdown/restart, to refinement to program offline/restart, etc. So what can we do in Go? Today let&amp;rsquo;s talk about the graceful shutdown of go programs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: How to custom build a gateway interceptor in Gin framwork</title>
      <link>/en/2021/10/talk-about-go-how-to-custom-build-a-gateway-interceptor-in-gin-framwork/</link>
      <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/10/talk-about-go-how-to-custom-build-a-gateway-interceptor-in-gin-framwork/</guid>
      <description>&lt;p&gt;Middleware often used as a level &amp;ldquo;security check&amp;rdquo;, for core components such as request header/request body verification, caching, and current limiting.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Before talking about the Gin web framework, let&#39;s take a look at httprouter</title>
      <link>/en/2021/08/before-talking-about-the-gin-web-framework-lets-take-a-look-at-httprouter/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/en/2021/08/before-talking-about-the-gin-web-framework-lets-take-a-look-at-httprouter/</guid>
      <description>&lt;p&gt;The etymology of Gin a strong alcohol, comes from the Netherlands.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Talk about Go: The operating system&#39;s thread scheduling and Goroutines</title>
      <link>/en/2020/10/talk-about-go-the-operating-systems-thread-scheduling-and-goroutines/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/en/2020/10/talk-about-go-the-operating-systems-thread-scheduling-and-goroutines/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2271/1*Y3cMxHqERb1htaJ0GbgixQ.png&#34; alt=&#34;Steal goroutine#ref by Renee French&#34;&gt;&lt;/p&gt;
&lt;p&gt;Every task running on our computer is resource allocation at the operating system level. From starting a process to creating a thread, with a fixed number of cores, multiple threads execute concurrently.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
