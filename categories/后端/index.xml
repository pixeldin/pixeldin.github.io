<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>后端 on Pixelpig&#39;s blog</title>
    <link>/categories/%E5%90%8E%E7%AB%AF/</link>
    <description>Recent content in 后端 on Pixelpig&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/%E5%90%8E%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>聊一聊Go网络编程(二)--TCP连接管理</title>
      <link>/2021/05/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%BA%8C-tcp%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/05/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%BA%8C-tcp%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;上一篇我们聊到在Go中是如何发起一个TCP连接的，以及列举一个全双工的Demo，这次接着填补上一节留下的坑，连接池管理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊Go网络编程(一)--TCP通信</title>
      <link>/2021/05/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%80-tcp%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/05/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%80-tcp%E9%80%9A%E4%BF%A1/</guid>
      <description>&lt;p&gt;在网络分层的七层协议中，我们知道TCP处于HTTP层的下方，本质上HTTP连接是基于底层的TCP连接建立的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊操作系统线程调度与Go协程</title>
      <link>/2020/10/%E8%81%8A%E4%B8%80%E8%81%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E4%B8%8Ego%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/10/%E8%81%8A%E4%B8%80%E8%81%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E4%B8%8Ego%E5%8D%8F%E7%A8%8B/</guid>
      <description>&lt;p&gt;我们计算机上面跑的每个任务，都是操作系统层面的资源分配，从启动进程到创建线程，在核数固定的情况下，多线程并发地执行。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊Go的Context上下文</title>
      <link>/2020/06/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%9A%84context%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/06/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%9A%84context%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
      <description>&lt;p&gt;前面在“聊一聊http框架&lt;strong&gt;httprouter&lt;/strong&gt;”的时候，提到了上下文的概念&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊Go语言的error处理</title>
      <link>/2020/03/%E8%81%8A%E4%B8%80%E8%81%8Ago%E8%AF%AD%E8%A8%80%E7%9A%84error%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/03/%E8%81%8A%E4%B8%80%E8%81%8Ago%E8%AF%AD%E8%A8%80%E7%9A%84error%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;在Go语言中，错误处理是一个常见的操作&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊一聊Go编写的命令行工具类</title>
      <link>/2020/02/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%BC%96%E5%86%99%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E7%B1%BB/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/02/%E8%81%8A%E4%B8%80%E8%81%8Ago%E7%BC%96%E5%86%99%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E7%B1%BB/</guid>
      <description>&lt;p&gt;Go原生在flag包提供了一个命令行工具类，它可以让我们执行类似命令行的赋参操作，经常被运用于工具类，特别是数据处理过程，可以方便我们进行参数可视化注解。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
